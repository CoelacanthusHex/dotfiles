###+++--- GPGConf ---+++###
utf8-strings
no-greeting
default-key E35C89E45867AE35

# https://wiki.archlinux.org/title/GnuPG#Different_algorithm
# https://futureboy.us/pgp.html#StrongerAlgorithms
# https://gnupg.org/faq/gnupg-faq.html#new_user_gpg_conf
# https://en.wikipedia.org/wiki/Twofish
# https://en.wikipedia.org/wiki/Camellia_(cipher)
# https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
# Althrough manual says "Be aware that if you choose an algorithm that GnuPG supports but other OpenPGP implementations do not,
# then some users will not be able to use the key signatures you make, or quite possibly your entire key."
# But I see SHA512 in RFC4880, so other OpenPGP implementations should support it.
# On the other hand, there is only one OpenPGP implementation called GNUPG in practice.
cert-digest-algo SHA512
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
personal-cipher-preferences CAMELLIA256 AES256 TWOFISH CAMELLIA192 AES192 CAMELLIA128 AES BLOWFISH CAST5 3DES
# s2k-cipher-algo is unset because we have set personal-cipher-preferences
#s2k-cipher-algo AES256
s2k-digest-algo SHA512

# https://wiki.archlinux.org/title/GnuPG#Always_show_long_ID's_and_fingerprints
keyid-format 0xlong

# https://www.yhi.moe/blog/en/my-gpg-configuration
# Ask trust level during signing
ask-cert-level

# This make GPG run only in a secure memory environment.
# GPG will alert you when it is in an “insecure” environment.
# Usually when running in a not-lockable memory or a flash
# memory disk you will receive such message, but GPG will not terminate operations.
# This option causes GPG refuse to proceed in this situation.
require-secmem

# Print fingerprint on master key and subkeys
with-fingerprint
with-subkey-fingerprint

# Show policy url notation
list-options show-policy-url show-user-notations show-sig-expire
list-options show-uid-validity

# https://www.kernel.org/doc/html/v5.15/process/maintainer-pgp-guide.html#web-of-trust-wot-vs-trust-on-first-use-tofu
# But I use pgp, conflict detect algorithm is not necessary and annoying
trust-model pgp
# By  setting  --tofu-default-policy=unknown, this model can be used to implement the web of trust with TOFU's conflict detection algorithm, but without its assignment of positive trust values, which some security-conscious users don't like.
tofu-default-policy unknown

# Key Server
keyserver hkps://keys.gnupg.net
#keyserver hkps://keys.openpgp.org
#keyserver hkps://keyserver.ubuntu.com
#keyserver hkps://pgp.mit.edu
#keyserver hkps://pgp.surfnet.nl

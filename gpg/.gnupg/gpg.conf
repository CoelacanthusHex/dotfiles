###+++--- GPGConf ---+++###
default-key E35C89E45867AE35


#--------------------------------------
# Certification Level
#--------------------------------------

# https://www.yhi.moe/blog/en/my-gpg-configuration
# Ask trust level during signing
ask-cert-level

# When building the trust database, treat any signatures with a certification
# level below this as invalid. Defaults to 2, which disregards level 1
# signatures. Note that level 0 "no particular claim" signatures are always
# accepted.
#min-cert-level 2

# Assume that the specified key (which must be given as a full 8 byte key ID) is
# as trustworthy as one of your own secret keys. This option is useful if you
# don't want to keep your secret keys (or one of them) online but still want to
# be able to check the validity of a given recipient's or signator's key.
trusted-key 15F4180E73787863


#--------------------------------------
# Trust model
#--------------------------------------

# https://www.kernel.org/doc/html/v5.15/process/maintainer-pgp-guide.html#web-of-trust-wot-vs-trust-on-first-use-tofu
# But I use pgp, conflict detect algorithm is not necessary and annoying
trust-model pgp

# Number of completely trusted users to introduce a new key signer.
# Defaults is: 1
#completes-needed 1

# Number of marginally trusted users to introduce a new key signer.
# Defaults in: 3
#marginals-needed 3

# By  setting  --tofu-default-policy=unknown, this model can be used to implement the web of trust with TOFU's conflict detection algorithm, but without its assignment of positive trust values, which some security-conscious users don't like.
tofu-default-policy unknown


#--------------------------------------
# Key Server Options
#--------------------------------------

# This is a space or comma delimited string that gives options for the
# keyserver. Options can be prefixed with a `no-' to give the opposite meaning.
# Valid import-options or export-options may be used here as well to apply to
# importing (--recv-key) or exporting (--send-key) a key from a keyserver. While
# not all options are available for all keyserver types, some common options
# are:
#   include-revoked
#       When searching for a key with --search-keys, include keys that are
#       marked on the keyserver as revoked. Note that not all keyservers
#       differentiate between revoked and unrevoked keys, and for such
#       keyservers this option is meaningless. Note also that most keyservers do
#       not have cryptographic verification of key revocations, and so turning
#       this option off may result in skipping keys that are incorrectly marked
#       as revoked.
#   include-disabled
#       When searching for a key with --search-keys, include keys that are
#       marked on the keyserver as disabled. Note that this option is not used
#       with HKP keyservers.
#   honor-keyserver-url
#       When using --refresh-keys, if the key in question has a preferred
#       keyserver URL, then use that preferred keyserver to refresh the key
#       from. In addition, if auto-key-retrieve is set, and the signature being
#       verified has a preferred keyserver URL, then use that preferred
#       keyserver to fetch the key from. Note that this option introduces a "web
#       bug": The creator of the key can see when the keys is refreshed. Thus
#       this option is not enabled by default.
#   honor-pka-record
#       If --auto-key-retrieve is used, and the signature being verified has a
#       PKA record, then use the PKA information to fetch the key. Defaults to
#       "yes".
#   include-subkeys
#      When receiving a key, include subkeys as potential targets. Note that
#      this option is not used with HKP keyservers, as they do not support
#      retrieving keys by subkey id.
#   timeout
#       Tell the keyserver helper program how long (in seconds) to try and
#       perform a keyserver action before giving up. Note that performing
#       multiple actions at the same time uses this timeout value per action.
#       For example, when retrieving multiple keys via --receive-keys, the
#       timeout applies separately to each key retrieval, and not to the
#       --receive-keys command as a whole. Defaults to 30 seconds.
#keyserver-options

# Key Server
keyserver hkps://keys.gnupg.net
#keyserver hkps://keys.openpgp.org
#keyserver hkps://keyserver.ubuntu.com
#keyserver hkps://pgp.mit.edu
#keyserver hkps://pgp.surfnet.nl
#keyserver hkps://pgp.gnd.pw


#--------------------------------------
# OpenPGP protocol specific options
#--------------------------------------

# https://wiki.archlinux.org/title/GnuPG#Different_algorithm
# https://futureboy.us/pgp.html#StrongerAlgorithms
# https://gnupg.org/faq/gnupg-faq.html#new_user_gpg_conf
# https://en.wikipedia.org/wiki/Twofish
# https://en.wikipedia.org/wiki/Camellia_(cipher)
# https://en.wikipedia.org/wiki/Advanced_Encryption_Standard
# The most highly ranked digest algorithm in this list is also used when signing
# without encryption (e.g. --clear-sign or --sign).
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
# Althrough manual says "Be aware that if you choose an algorithm that GnuPG supports but other OpenPGP implementations do not,
# then some users will not be able to use the key signatures you make, or quite possibly your entire key."
# But I see SHA512 in RFC4880, so other OpenPGP implementations should support it.
# On the other hand, there is only one OpenPGP implementation called GNUPG in practice.
cert-digest-algo SHA512
# The most highly ranked cipher in this list is also used for the --symmetric
# encryption command.
personal-cipher-preferences CAMELLIA256 AES256 TWOFISH CAMELLIA192 AES192 CAMELLIA128 AES BLOWFISH CAST5 3DES
personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
# s2k-cipher-algo is unset because we have set personal-cipher-preferences
#s2k-cipher-algo AES256
s2k-digest-algo SHA512

# List of default ciphers when creating new keys
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed

# Uncomment if you use GnuPG >= 2.3.0
#force-aead

#--------------------------------------
# Security Options
#--------------------------------------

# This make GPG run only in a secure memory environment.
# GPG will alert you when it is in an “insecure” environment.
# Usually when running in a not-lockable memory or a flash
# memory disk you will receive such message, but GPG will not terminate operations.
# This option causes GPG refuse to proceed in this situation.
require-secmem

# When making a data signature, prompt for an expiration time. If this option is
# not specified, the expiration time set via --default-sig-expire is used.
# --no-ask-sig-expire disables this option.
#no-ask-sig-expire

# The default expiration time to use for signature expiration. Valid values are
# "0" for no expiration, a number followed by the letter d (for days), w (for
# weeks), m (for months), or y (for years) (for example "2m" for two months, or
# "5y" for five years), or an absolute date in the form YYYY-MM-DD. Defaults to
# "0".
#default-sig-expire 0

#--------------------------------------
# Display Options
#--------------------------------------

# https://wiki.archlinux.org/title/GnuPG#Always_show_long_ID's_and_fingerprints
keyid-format 0xlong

# Print fingerprint on master key and subkeys
with-fingerprint
with-subkey-fingerprint

# Suppress the initial copyright message.
no-greeting

# This is a space or comma delimited string that gives options used when listing
# keys and signatures.
#
# That is, --list-keys, --check-signatures, --list-public-keys,
# --list-secret-keys, and the --edit-key functions.
#
# Options can be prepended with a no- (after the two dashes) to give the
# opposite meaning. The options are:
#   show-photos
#       Causes --list-keys, --check-signatures, --list-public-keys, and
#       --list-secret-keys to display any photo IDs attached to the key.
#       Defaults to no. See also --photo-viewer. Does not work with
#       --with-colons: see --attribute-fd for the appropriate way to get photo
#       data for scripts and other frontends.
#   show-usage
#       Show usage information for keys and subkeys in the standard key listing.
#       This is a list of letters indicating the allowed usage for a key
#       (E=encryption, S=signing, C=certification, A=authentication). Defaults
#       to yes.
#   show-policy-urls
#       Show policy URLs in the --check-signatures listings. Defaults to no.
#   show-notations, show-std-notations, show-user-notations
#       Show all, IETF standard, or user-defined signature notations in the
#       --check-signatures listings. Defaults to no.
#   show-keyserver-urls
#       Show any preferred keyserver URL in the --check-signatures listings.
#       Defaults to no.
#   show-uid-validity
#       Display the calculated validity of user IDs during key listings.
#       Defaults to yes.
#   show-unusable-uids
#       Show revoked and expired user IDs in key listings. Defaults to no.
#   show-unusable-subkeys
#       Show revoked and expired subkeys in key listings. Defaults to no.
#   show-keyring
#       Display the keyring photoration dates (if any) during --check-signatures
#       listings. Defaults to no.
#   show-sig-subpackets
#       Include signature subpackets in the key listing. This option can take an
#       optional argument list of the subpackets to list. If no argument is
#       passed, list all subpackets. Defaults to no. This option is only
#       meaningful when using --with-colons along with --check-signatures.
#   show-only-fpr-mbox
#       For each valid user-id which also has a valid mail address print only
#       the fingerprint and the mail address.
#
list-options show-policy-url show-user-notations show-sig-expire
list-options show-uid-validity

# This is a space or comma delimited string that gives options used when
# verifying signatures. Options can be prepended with a `no-' to give the
# opposite meaning. The options are:
#   show-photos
#       Display any photo IDs present on the key that issued the signature.
#       Defaults to no. See also --photo-viewer.
#   show-policy-urls
#       Show policy URLs in the signature being verified. Defaults to yes.
#   show-notations, show-std-notations, show-user-notations
#       Show all, IETF standard, or user-defined signature notations in the
#       signature being verified. Defaults to IETF standard.
#   show-keyserver-urls
#       Show any preferred keyserver URL in the signature being verified.
#       Defaults to yes.
#   show-uid-validity
#       Display the calculated validity of the user IDs on the key that issued
#       the signature. Defaults to yes.
#   show-unusable-uids
#       Show revoked and expired user IDs during signature verification.
#       Defaults to no.
#   show-primary-uid-only
#       Show only the primary user ID during signature verification. That is all
#       the AKA lines as well as photo Ids are not shown with the signature
#       verification status.
#   pka-lookups
#       Enable PKA lookups to verify sender addresses. Note that PKA is based on
#       DNS, and so enabling this option may disclose information on when and
#       what signatures are verified or to whom data is encrypted. This is
#       similar to the "web bug" described for the --auto-key-retrieve option.
#   pka-trust-increase
#       Raise the trust in a signature to full if the signature passes PKA
#       validation. This option is only meaningful if pka-lookups is set.
verify-options show-policy-urls show-uid-validity

# Use this program to display photo user IDs
#
# %i is expanded to a temporary file that contains the photo.
# %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
# %k is expanded to the key ID of the key.
# %K is expanded to the long OpenPGP key ID of the key.
# %t is expanded to the extension of the image (e.g. "jpg").
# %T is expanded to the MIME type of the image (e.g. "image/jpeg").
# %f is expanded to the fingerprint of the key.
# %% is %, of course.
#
# If %i or %I are not present, then the photo is supplied to the
# viewer on standard input.  If your platform supports it, standard
# input is the best way to do this as it avoids the time and effort in
# generating and then cleaning up a secure temp file.
#
photo-viewer "feh --title 'KeyID 0x%k' %i"


#--------------------------------------
# Misc
#--------------------------------------

#sig-policy-url https://pgp.coelacanthus.moe/policy-signed.txt

utf8-strings

# If you do not use the Latin-1 (ISO-8859-1) charset, you should tell
# GnuPG which is the native character set.  Please check the man page
# for supported character sets.  This character set is only used for
# metadata and not for the actual message which does not undergo any
# translation.  Note that future version of GnuPG will change to UTF-8
# as default character set.  In most cases this option is not required
# as GnuPG is able to figure out the correct charset at runtime.
charset utf-8

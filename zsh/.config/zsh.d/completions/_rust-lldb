#compdef rust-lldb

# zsh completions for 'rust-lldb'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  '--attach-name[tells the debugger to attach to a process with the given name.]'
  '--attach-pid[tells the debugger to attach to a process with the given pid.]'
  '-n[alias for --attach-name]'
  '-p[alias for --attach-pid]'
  '--wait-for[tells the debugger to wait for a process with the given pid or name to launch before attaching.]'
  '-w[alias for --wait-for]'
  '--batch[tells the debugger to run the commands from -s, -S, -o & -O, and then quit.]'
  '-b[alias for --batch]'
  '-K[alias for --source-on-crash]'
  '-k[alias for --one-line-on-crash]'
  '--local-lldbinit[allow the debugger to parse the .lldbinit files in the current working directory, unless --no-lldbinit is passed.]'
  '--no-lldbinit[do not automatically parse any .lldbinit files.]'
  '--one-line-before-file[tells the debugger to execute this one-line lldb command before any file provided on the command line has been loaded.]'
  '--one-line-on-crash[when in batch mode, tells the debugger to run this one-line lldb command if the target crashes.]'
  '--one-line[tells the debugger to execute this one-line lldb command after any file provided on the command line has been loaded.]'
  '-O[alias for --one-line-before-file]'
  '-o[alias for --one-line]'
  '-Q[alias for --source-quietly]'
  '--source-before-file[tells the debugger to read in and execute the lldb commands in the given file, before any file has been loaded.]'
  '--source-on-crash[when in batch mode, tells the debugger to source this file of lldb commands if the target crashes.]'
  '--source-quietly[tells the debugger to execute this one-line lldb command before any file has been loaded.]'
  '--source[tells the debugger to read in and execute the lldb commands in the given file, after any file has been loaded.]'
  '-S[alias for --source-before-file]'
  '-s[alias for --source]'
  '-x[alias for --no-lldbinit]'
  '--arch[tells the debugger to use the specified architecture when starting and running the program.]'
  '-a[alias for --arch]'
  '--capture-path[tells the debugger to use the given filename for the reproducer.]'
  '--capture[tells the debugger to capture a reproducer.]'
  '--core[tells the debugger to use the full path to <filename> as the core file.]'
  '-c[alias for --core]'
  '--debug[tells the debugger to print out extra information for debugging itself.]'
  '-d[alias for --debug]'
  '--editor[tells the debugger to open source files using the hosts "external editor" mechanism.]'
  '-e[alias for --editor]'
  '--file[tells the debugger to use the file <filename> as the program to be debugged.]'
  '-f[alias for --file]'
  '--help[prints out the usage information for the LLDB debugger.]'
  '-h[alias for --help]'
  '--no-use-colors[do not use colors.]'
  '--replay[tells the debugger to replay a reproducer from <filename>.]'
  '--reproducer-generate-on-exit[generate reproducer on exit.]'
  '--reproducer-no-generate-on-signal[dont generate reproducer when a signal is received.]'
  '--reproducer-no-verify[the reproducer verification.]'
  '--reproducer-no-version-check[disable the reproducer version check.]'
  '--version[prints out the current version number of the LLDB debugger.]'
  '-v[alias for --version]'
  '-X[alias for --no-use-color]'
  '-r[alias for --repl=<flags>]'
  '--repl-language[chooses the language for the REPL.]'
  '--repl[runs lldb in REPL mode with a stub process with the given flags.]'
  '--repl[runs lldb in REPL mode with a stub process.]'
  '-R[alias for --repl-language]'
  '-r[alias for --repl]'
  '-l[alias for --script-language]'
  '--python-path[out the path to the lldb.py file for this version of lldb.]'
  '-P[alias for --python-path]'
  '--script-language[tells the debugger to use the specified scripting language for user-defined scripts.]'
  '*:filename:_files'
)

_arguments -s $arguments

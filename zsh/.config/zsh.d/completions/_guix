#compdef guix

typeset -A opt_args

_arguments -C \
  '1:cmd:->cmds' \
  '*:: :->args' \
  && ret=0

case "$state" in
  (cmds)
    local commands; commands=(
      'archive:Export/import one or more packages from/to the store'
      'build:Build the given PACKAGE-OR-DERIVATION and return their output paths'
      'challenge:Challenge the substitutes for PACKAGE'
      'container:Build and manipulate Linux containers'
      'copy:Copy ITEMS to or from the specified host over SSH'
      'deploy:Perform the deployment specified by FILE'
      'describe:Display information about the channels currently in use'
      'download:Download the file at URL to the stor or to the given file, and print its file name and the hash of its contents'
      'edit:Start $VISUAL or $EDITOR to edit the definitions of PACKAGE'
      'environment:Build an environment that includes the dependencies of PACKAGE and execute COMMAND or an interactive shell in that environment'
      'gc:Invoke the garbage collector'
      'graph:Emit a representation of the dependency graph of PACKAGE'
      'hash:Return the cryptographic hash of FILE'
      'import:Run IMPORTER with ARGS'
      'install:Install the given PACKAGES'
      'lint:Run a set of checkers on the specified package; if none is specified, run the checkers on all packages'
      'pack:Create a bundle of PACKAGE'
      'package:Install, remove, or upgrade packages in a single transaction'
      'processes:List the current Guix sessions and their processes'
      'publish:Publish /gnu/store over HTTP'
      'pull:Download and deploy the latest version of Guix'
      'refresh:Update package definitions to match the latest upstream version'
      'remove:Remove the given PACKAGES'
      'repl:Start a Guile REPL in the Guix execution environment'
      'search:Search for packages matching REGEXPS'
      'show:Show details about PACKAGE'
      'size:Report the size of PACKAGE and its dependencies'
      'system:Build the operating system declared in FILE according to ACTION.'
      'time-machine:Execute COMMAND ARGS... in an older version of Guix'
      'upgrade:Upgrade packages that match REGEXP'
      'weather:Report the availability of substitutes'
    )

    _describe -t commands 'command' commands && ret=0
    ;;
  (args)
    case $line[1] in
      (archive)
        _arguments \
          '(--export)'--export'[export the specified files/packages to stdout]' \
          '(-r --recursive)'{-r,--recursive}'[combined with "--export", include dependencies]' \
          '(--import)'--import'[import from the archive passed on stdin]' \
          '(--missing)'--missing'[print the files from stdin that are missing]' \
          '(-x --extract)'{-x,--extract}'[extract the archive on stdin to DIR]:DIR' \
          '(-t --list)'{-t,--list}'[list the files in the archive on stdin]:NAME' \
          '(--generate-key)'--generate-key'[generate a key pair with the given parameters]:PARAMETERS' \
          '(--authorize)'--authorize'[authorize imports signed by the public key on stdin]' \
          '(-e --expression)'{-e,--expression}'[build the package or derivation EXPR evaluates to]:EXPR' \
          '(-S --source)'{-S,--source}'[build the packages" source derivations]' \
          '(-s --system)'{-s,--system}'[attempt to build for SYSTEM--e.g., "i686-linux"]' \
          '(--target)'--target'[cross-build for TRIPLET--e.g., "armel-linux-gnu"]:TRIPLET' \
          '(-v --verbosity)'{-v,--verbosity}'[use the given verbosity LEVEL]:LEVEL' \
          '(-L --load-path)'{-L,--load-path}'[prepend DIR to the package module search path]:DIR' \
          '(-K --keep-failed)'{-K,--keep-failed}'[keep build tree of failed builds]' \
          '(-k --keep-going)'{-k,--keep-going}'[keep going when some of the derivations fail]' \
          '(-n --dry-run)'{-n,--dry-run}'[do not build the derivations]' \
          '(--fallback)'--fallback'[fall back to building when the substituter fails]' \
          '(--no-substitutes)'--no-substitutes'[build instead of resorting to pre-built substitutes]' \
          '(--substitute-urls)'--substitute-urls'[fetch substitute from URLS if they are authorized]:URLS' \
          '(--no-grafts)'--no-grafts'[do not graft packages]' \
          '(--no-offload)'--no-offload'[do not attempt to offload builds]' \
          '(--max-silent-time)'--max-silent-time'[mark the build as failed after SECONDS of silence]:SECONDS' \
          '(--timeout)'--timeout'[mark the build as failed after SECONDS of activity]:SECONDS' \
          '(--rounds)'--rounds'[build N times in a row to detect non-determinism]:N' \
          '(-c --cores)'{-c,--cores}'[allow the use of up to N CPU cores for the build]:N' \
          '(-M --max-jobs)'{-M,--max-jobs}'[allow at most N build jobs]:N' \
          '(--debug)'--debug'[produce debugging output at LEVEL]:LEVEL' \
          '(-h,--help)'{-h,--help}'[display this help and exit]' \
          '(-V, --version)'{-V,--version}'[display version information and exit]'
        ret=0
        ;;
      (challenge)
        _arguments \
          '(--substitute-urls)'--substiture-urls'[compare build results with those at URLS]:URLS' \
          '(-v --verbose )'{-v,--verbose}'[show details about successful comparisons]' \
          '(--diff)'--diff'[show differences according to MODE]' \
          '(-h --help)'{-h,--help}'[display this help and exit]' \
          '(-V --version)'{-V,--version}'[display version information and exit]'
        ret=0
        ;;
    esac
    ;;
esac

return 1

" vim: set sw=4 ts=8 sts=4 et foldmethod=marker:

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" Avoid side effects when it was already reset.
if &compatible
    set nocompatible
endif

" Set Path {{{
if has("win32") || has("win64")
    let g:vimfiles = split(&runtimepath, ',')[1]
    if has('directx')
        set renderoptions=type:directx
    endif
else
    " Linux 路径 [[[3
    let g:vimfiles = split(&runtimepath, ',')[0]
    " cron 的目录不要备份
    set backupskip+=/etc/cron.*/*
    set backupdir=.,/var/tmp,/tmp
endif
if exists(':packadd')
    " insert after the first one so spell changes won't go
    " into our config directory.
    let rtp = split(&runtimepath, ',')
    call insert(rtp, g:vimfiles . '/conf.d', 1)
    let &runtimepath = join(rtp, ',')
    unlet rtp
endif
" }}}

" 插件 {{{
" 自动安装 {{{
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" }}}

call plug#begin('~/.vim/plugged')

    Plug 'junegunn/vim-plug'

    " 主题配色 {{{
    Plug 'joshdick/onedark.vim'
    " 状态栏
    Plug 'vim-airline/vim-airline'
    " 状态栏主题
    Plug 'vim-airline/vim-airline-themes'
    " }}}
    
    " Misc {{{
    " 代码格式化
    Plug 'sbdchd/neoformat'
    map <F5> :Neoformat <CR>
    " Git
    Plug 'tpope/vim-git'
    Plug 'tpope/vim-fugitive'
    " Fcitx
    if exists("$DISPLAY") || exists("$WAYLAND_DISPLAY")
        Plug 'lilydjwg/fcitx.vim'
    endif
    " 缩进指示线
    Plug 'Yggdroot/indentLine'
    " 自动括号
    Plug 'jiangmiao/auto-pairs'
    " Tagbar
    Plug 'majutsushi/tagbar'
    " 彩虹括号
    Plug 'luochen1990/rainbow'
    let g:rainbow_active = 1
    " HELP文档中文
    "Plug 'yianwillis/vimcdoc'
    " EditorConfig
    Plug 'editorconfig/editorconfig-vim'
    " 颜色代码转颜色
    "Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
    " Git sign column
    if has('patch-8.0.902')
        Plug 'mhinz/vim-signify'
    else
        Plug 'mhinz/vim-signify', { 'branch': 'legacy' }
    endif
    " Auto detect indent size
    "Plug 'tpope/vim-sleuth'
    " Unicode
    Plug 'chrisbra/unicode.vim'
    " Sudo support
    Plug 'lambdalisue/suda.vim'
    " Snippets
    Plug 'SirVer/ultisnips'
    let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
    Plug 'tomtom/tcomment_vim'
    Plug 'skywind3000/asyncrun.vim'

    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-endwise'
    Plug 'Shougo/echodoc.vim'
    Plug 'Shougo/context_filetype.vim'

    " 目录树
    Plug 'preservim/nerdtree'
    map <C-n> :NERDTreeToggle<CR>
    let NERDTreeShowHidden=1
    "Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    " enables folder icon highlighting using exact match
    "let g:NERDTreeHighlightFolders = 1
    " highlights the folder name
    "let g:NERDTreeHighlightFoldersFullName = 1
    " 图标
    Plug 'liuchengxu/nerdtree-dash'

    Plug 'dense-analysis/ale', {'for': ['sh', 'c', 'cpp', 'rust', 'python', 'go', 'tex']}

    Plug 'vim-scripts/gtags.vim'
    Plug 'ludovicchabant/vim-gutentags'
    " }}}

    " 自动补全 {{{
    " 现在使用 YouCompleteMe
    if has("win32") || has("win64")
        function! BuildYCM(info)
            " info is a dictionary with 3 fields
            " - name:   name of the plugin
            " - status: 'installed', 'updated', or 'unchanged'
            " - force:  set on PlugInstall! or PlugUpdate!
            if a:info.status == 'installed' || a:info.force
                !./install.py --clangd-completer --system-libclang --ninja
            endif
        endfunction

        Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }
        let g:ycm_clangd_binary_path = "/path/to/clangd"
    endif
	" }}}

    " Language {{{
    

    """"""" C++
    Plug 'octol/vim-cpp-enhanced-highlight', {'for': ['c', 'cpp']}


    """"""" Rust
    Plug 'cespare/vim-toml', { 'branch': 'main' }
    " Playpen integration
    Plug 'mattn/webapi-vim'
    " Rust 支持
    Plug 'rust-lang/rust.vim', {'for': 'rust'}
    Plug 'racer-rust/vim-racer', {'for': 'rust'}
    " 保存时自动格式化
    "let g:autofmt_autosave = 1
    " Cargo 增强
    Plug 'timonv/vim-cargo'


    """"""" Scala
    Plug 'derekwyatt/vim-scala', {'for': 'scala'}


    """"""" Python
    Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}


    """"""" Go
    Plug 'fatih/vim-go', {'for': 'go'}
    
    
    """"""" TypeScript
    Plug 'HerringtonDarkholme/yats.vim', {'for': ['javescript', 'typescript']}
    " https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
    Plug 'pangloss/vim-javascript', {'for': ['javescript', 'typescript']}
    Plug 'jelera/vim-javascript-syntax', {'for': ['javescript', 'typescript']}
    Plug 'styled-components/vim-styled-components', { 'branch': 'main', 'for': ['javescript', 'typescript'] }
    Plug 'jparise/vim-graphql', {'for': ['javescript', 'typescript']}


    """"""" Markdown
    " Markdown 语法支持
    Plug 'godlygeek/tabular', {'for': 'markdown'}
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}


    """"""" Vim Script
    Plug 'Shougo/neco-vim', {'for':'vim'}


    """"""" Haskell
    Plug 'neovimhaskell/haskell-vim', {'for': 'haskell'}


    """"""" LaTeX
    Plug 'lervag/vimtex', {'for': ['tex', 'latex']}


    """"""" Nginx
    Plug 'chr4/nginx.vim'


    """"""" systemd 文件的语法高亮
    Plug 'Matt-Deacalion/vim-systemd-syntax'


    """"""" Beancount
    Plug 'nathangrigg/vim-beancount'


    """"""" Nftables
    Plug 'nfnty/vim-nftables'


    """"""" Kitty
    Plug 'fladson/vim-kitty'


    """"""" Others
    Plug 'rhysd/vim-syntax-codeowners'
    "}}}

call plug#end()

" }}}

" Function and map {{{

let mapleader='\'

nnoremap <leader>bf :buffers<CR>:buffer<Space>

" https://github.com/lilydjwg/dotvim/blob/19f6f8ea67150cb5498706912b770d3c736716f2/vimrc#L36
" 删除所有未显示且无修改的缓冲区以减少内存占用
function Lilydjwg_cleanbufs()
    for bufNr in filter(range(1, bufnr('$')),
            \ 'buflisted(v:val) && !bufloaded(v:val)')
        execute bufNr . 'bdelete'
    endfor
endfunction

" https://github.com/ycm-core/YouCompleteMe/issues/36#issuecomment-171966710
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

function! g:UltiSnips_Reverse()
    call UltiSnips#JumpBackwards()
    if g:ulti_jump_backwards_res == 0
        return "\<C-P>"
    endif

    return ""
endfunction


if !exists("g:UltiSnipsJumpForwardTrigger")
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" ctrl+hjkl 移动窗口
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" }}}

" 配色方案 {{{
set background=dark
colorscheme onedark
if &term == "linux"
    let g:airline_symbols_ascii = 1
    let g:airline_theme='base16_gruvbox_dark_hard'
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_symbols.colnr = ' col:'
    let g:airline_symbols.crypt = 'crypt'
    let g:airline_symbols.dirty = 'dirty'
else
    let g:airline_symbols_ascii = 0
    let g:airline_theme='onedark'
endif
" }}}

" Hack for Terminal {{{
" https://github.com/lilydjwg/dotvim/blob/19f6f8ea67150cb5498706912b770d3c736716f2/vimrc#L559
if has("gui_running")
    set mousemodel=popup
    " 有些终端不能改变大小
    set columns=88
    set lines=38
    set cursorline
elseif has("unix")
    set ambiwidth=single
    " 防止退出时终端乱码
    " 这里两者都需要。只前者标题会重复，只后者会乱码
    " 我也不知道为啥，但是这东西会给我乱输出 (B
    "exec "set t_fs=\033(B\007"
    "exec "set t_IE=\033(B\007"
    if $COLORTERM == 'truecolor'
        set cursorline
        set termguicolors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    elseif &term =~ '256color\|nvim'
        set cursorline
    else
        " 在 Linux 文本终端下非插入模式显示块状光标
        if &term == "linux" || &term == "fbterm"
            exec "set t_ve+=\033[?6c"
            autocmd InsertEnter * exec "set t_ve-=\033[?6c"
            autocmd InsertLeave * exec "set t_ve+=\033[?6c"
            " autocmd VimLeave * exec "set t_ve-=\033[?6c"
        endif
        if &term == "fbterm"
            set cursorline
        elseif $TERMCAP =~ 'Co#256'
            set t_Co=256
            set cursorline
        endif
    endif
elseif has('win32') && exists('$CONEMUBUILD')
    " enable 256 colors in ConEmu on Win
    set term=xterm
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
    set cursorline
endif

" https://github.com/lilydjwg/dotvim/blob/19f6f8ea67150cb5498706912b770d3c736716f2/vimrc#L621
" bracketed paste mode support for tmux
if &term =~ '^screen\|^tmux' && exists('&t_BE')
    let &t_BE = "\033[?2004h"
    let &t_BD = "\033[?2004l"
    " t_PS and t_PE are key code options and they are special
    exec "set t_PS=\033[200~"
    exec "set t_PE=\033[201~"
endif
if &term =~ '^screen\|^tmux'
    " This may leave mouse in use by terminal application
    " exec "set t_RV=\033Ptmux;\033\033[>c\033\\"
    set ttymouse=sgr
    if &t_GP == ''
        " for getwinpos
        exec "set t_GP=\033Ptmux;\033\033[13t\033\\"
    endif
endif
" }}}

nmap ga <Plug>(UnicodeGA)

" kate: space-indent on; indent-width 4; syntax vim;

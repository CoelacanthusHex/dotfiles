# SPDX-License-Identifier: MPL-2.0
# SPDX-FileCopyrightText: Coelacanthus

[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
if = '!filereadable("/usr/share/vim/vimfiles/plugin/youcompleteme.vim") && executable("deno")'
hook_source = '''
    source ~/.vim/dein.d/ddc.rc.vim
'''

[[plugins]]
repo = 'Shougo/pum.vim'

# Source
[[plugins]]
repo = 'Shougo/ddc-around'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-omni'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
depends = ['denops.vim', 'vim-lsp', 'vim-lsp-settings']

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc-vim-lsp'
depends = ['denops.vim', 'vim-lsp']
hook_source = '''
    call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
#on_source = 'ddc-vim-lsp'
depends = ['denops.vim', 'vim-lsp']
hook_source = '''
    call signature_help#enable()
    let g:lsp_signature_help_enabled = 0
'''

[[plugins]]
repo = 'Shougo/ddc-zsh'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-dictionary'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-ultisnips'
depends = ['denops.vim', 'ultisnips']
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-git'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'delphinus/ddc-ctags'
depends = ['denops.vim', 'vim-gutentags']
on_source = 'ddc.vim'
if = "executable('ctags')"

[[plugins]]
repo = 'skanehira/denops-gh.vim'
depends = ['denops.vim']
on_source = 'ddc.vim'
hook_source = '''
    call ddc#custom#patch_filetype(['gitcommit'], {
        \ 'sources': ['around', 'buffer', 'file', 'dictionary', 'gh_issues', 'gh_issues_assginees', 'gh_issues_labels'],
        \ })
    call ddc#custom#patch_filetype(['gitcommit'], {
        \ 'sourceOptions': {
        \   'gh_issues': {
        \     'matcherKey': 'menu',
        \     'minAutoCompleteLength': 1,
        \   },
        \   'gh_issues_assginees': {
        \     'minAutoCompleteLength': 1,
        \   },
        \   'gh_issues_labels': {
        \     'minAutoCompleteLength': 1,
        \   },
        \ },
        \ })
'''

# Filter
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-filter_editdistance'
depends = ['denops.vim']
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-converter_truncate'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# vim: set sw=4 ts=8 sts=4 et foldmethod=marker:
# kate: space-indent on; indent-width 4; syntax toml;

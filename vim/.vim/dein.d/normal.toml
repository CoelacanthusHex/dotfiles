# SPDX-License-Identifier: MPL-2.0
# SPDX-FileCopyrightText: Coelacanthus

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
on_source = 'vim-airline/vim-airline'

[[plugins]]
repo = 'sbdchd/neoformat'
hook_source = '''
    map <F5> :Neoformat <CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'Raimondi/delimitMate'

[[plugins]]
repo = '91khr/rainbow'
on_source = '''
    let g:rainbow_active = 1
'''

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'chrisbra/unicode.vim'

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'

[[plugins]]
repo = 'SirVer/ultisnips'
on_source = '''
    let g:UltiSnipsSnippetDirectories = [$HOME . '/.vim/UltiSnips']
    function! g:UltiSnips_Complete()
        call UltiSnips#ExpandSnippet()
        if g:ulti_expand_res == 0
            if pumvisible()
                return "\<C-n>"
            else
                call UltiSnips#JumpForwards()
                if g:ulti_jump_forwards_res == 0
                    return "\<TAB>"
                endif
            endif
        endif
        return ""
    endfunction

    function! g:UltiSnips_Reverse()
        call UltiSnips#JumpBackwards()
        if g:ulti_jump_backwards_res == 0
            return "\<C-P>"
        endif

        return ""
    endfunction


    if !exists("g:UltiSnipsJumpForwardTrigger")
        let g:UltiSnipsJumpForwardTrigger = "<tab>"
    endif

    if !exists("g:UltiSnipsJumpBackwardTrigger")
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    endif

    au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
    au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
'''

[[plugins]]
repo = 'andymass/vim-matchup'
on_source = '''
    let g:loaded_matchit = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'lilydjwg/fcitx.vim'
#if = 'exists("$DBUS_SESSION_BUS_ADDRESS")'

[[plugins]]
repo = 'Shougo/echodoc.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'gelguy/wilder.nvim'
# Not need for we don't use fuzzy
#depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
    call wilder#setup({
        \   'modes': [':', '/', '?'],
        \   'enable_cmdline_enter': 0,
        \ })
    call wilder#set_option('pipeline', [
        \ wilder#branch(
        \     wilder#cmdline_pipeline(),
        \     wilder#search_pipeline(),
        \ ),
        \ ])
    call wilder#set_option('renderer', wilder#popupmenu_renderer({
        \ 'highlighter': wilder#basic_highlighter(),
        \ }))
'''

[[plugins]]
repo = 'timonv/vim-cargo'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'egberts/vim-syntax-bind-named'

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = ['csv']

[[plugins]]
repo = 'vim-crystal/vim-crystal'
on_ft = ['crystal']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html']

[[plugins]]
repo = 'peterhoeg/vim-qml'
on_ft = ['qml']

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'
on_ft = ['cmake']

[[plugins]]
repo = 'cespare/vim-toml'
rev = 'main'
on_ft = ['toml']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
depends = ['webapi-vim']

[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = ['scala']

[[plugins]]
repo = 'lfiolhais/vim-chisel'
on_ft = ['chisel']

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = ['python']

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['javescript', 'typescript']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javescript', 'typescript']

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = ['javescript', 'typescript']

[[plugins]]
repo = 'styled-components/vim-styled-components'
rev = 'main'
on_ft = ['javescript', 'typescript']

[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = ['javescript', 'typescript']

[[plugins]]
repo = 'godlygeek/tabular'
on_ft = ['markdown']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex', 'latex']

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 'Matt-Deacalion/vim-systemd-syntax'
on_ft = ['systemd', 'networkd']

[[plugins]]
repo = 'nathangrigg/vim-beancount'
on_ft = ['beancount']

[[plugins]]
repo = 'nfnty/vim-nftables'
on_ft = ['nftables']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = ['kotlin']

[[plugins]]
repo = 'tikhomirov/vim-glsl'
on_ft = ['glsl']

[[plugins]]
repo = 'rhysd/vim-syntax-codeowners'
on_ft = ['codeowners']

[[plugins]]
repo = 'rbtnn/vim-vimscript_indentexpr'
on_ft = ['vim']

[[plugins]]
repo = 'vim-perl/vim-perl'
on_ft = ['perl']
build = 'make clean carp dancer highlight-all-pragmas moose test-more try-tiny'

[[plugins]]
repo = 'benknoble/vim-racket'
on_ft = ['racket', 'scribble', 'racket-info']

# vim: set sw=4 ts=8 sts=4 et foldmethod=marker:
# kate: space-indent on; indent-width 4; syntax toml;

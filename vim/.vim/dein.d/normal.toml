# SPDX-License-Identifier: MPL-2.0
# SPDX-FileCopyrightText: Coelacanthus

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
on_source = 'vim-airline/vim-airline'

[[plugins]]
repo = 'sbdchd/neoformat'
hook_source = '''
    map <F5> :Neoformat <CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'Raimondi/delimitMate'

[[plugins]]
repo = '91khr/rainbow'
on_source = '''
    let g:rainbow_active = 1
'''

[[plugins]]
repo = 'tpope/vim-sleuth'

[[plugins]]
repo = 'chrisbra/unicode.vim'

[[plugins]]
repo = 'tpope/vim-eunuch'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'

[[plugins]]
repo = 'SirVer/ultisnips'
on_source = '''
    let g:UltiSnipsSnippetDirectories = [$HOME . '/.vim/UltiSnips']
    function! g:UltiSnips_Complete()
        call UltiSnips#ExpandSnippet()
        if g:ulti_expand_res == 0
            if pumvisible()
                return "\<C-n>"
            else
                call UltiSnips#JumpForwards()
                if g:ulti_jump_forwards_res == 0
                    return "\<TAB>"
                endif
            endif
        endif
        return ""
    endfunction

    function! g:UltiSnips_Reverse()
        call UltiSnips#JumpBackwards()
        if g:ulti_jump_backwards_res == 0
            return "\<C-P>"
        endif

        return ""
    endfunction


    if !exists("g:UltiSnipsJumpForwardTrigger")
        let g:UltiSnipsJumpForwardTrigger = "<tab>"
    endif

    if !exists("g:UltiSnipsJumpBackwardTrigger")
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    endif

    au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger     . " <C-R>=g:UltiSnips_Complete()<cr>"
    au InsertEnter * exec "inoremap <silent> " .     g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"
'''

[[plugins]]
repo = 'andymass/vim-matchup'
on_source = '''
    let g:loaded_matchit = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'Shougo/echodoc.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'gelguy/wilder.nvim'
# Not need for we don't use fuzzy
#depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
    call wilder#setup({
        \   'modes': [':', '/', '?'],
        \   'enable_cmdline_enter': 0,
        \ })
    call wilder#set_option('pipeline', [
        \ wilder#branch(
        \     wilder#cmdline_pipeline(),
        \     wilder#search_pipeline(),
        \ ),
        \ ])
    call wilder#set_option('renderer', wilder#popupmenu_renderer({
        \ 'highlighter': wilder#basic_highlighter(),
        \ }))
'''

[[plugins]]
repo = 'timonv/vim-cargo'

# vim: set sw=4 ts=8 sts=4 et foldmethod=marker:
# kate: space-indent on; indent-width 4; syntax toml;
